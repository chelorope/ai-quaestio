/*******************************************************************************
 * Copyright ï¿½ 2006-2011, www.processconfiguration.com
 *   
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *   
 * Contributors:
 *      Marcello La Rosa - initial API and implementation, subsequent revisions
 *      Florian Gottschalk - individualizer for YAWL
 *      Possakorn Pitayarojanakul - integration with Configurator and Individualizer
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.04.14 at 01:59:07 PM EST 
//

package com.processconfiguration.cmap;

import java.util.ArrayList;
import java.util.List;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlElements;
import jakarta.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for c-epcType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="c-epcType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice maxOccurs="unbounded">
 *         &lt;element name="COR" type="{http://www.processconfiguration.com/CMAP}CORType"/>
 *         &lt;element name="CXOR" type="{http://www.processconfiguration.com/CMAP}CXORType"/>
 *         &lt;element name="CAND" type="{http://www.processconfiguration.com/CMAP}CANDType"/>
 *         &lt;element name="CFunction" type="{http://www.processconfiguration.com/CMAP}CFunctionType"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "c-epcType", propOrder = { "corOrCXOROrCAND", "or", "xor",
		"and", "function" })
// add new propOrder cor, cxor, cand
public class CEpcType {

	@XmlElements({ @XmlElement(name = "CFunction", type = CFunctionType.class),
			@XmlElement(name = "COR", type = CORType.class),
			@XmlElement(name = "CAND", type = CANDType.class),
			@XmlElement(name = "CXOR", type = CXORType.class) })
	protected List<Object> corOrCXOROrCAND;
	// declare new parameter
	protected List<CORType> or;
	protected List<CXORType> xor;
	protected List<CANDType> and;
	protected List<CFunctionType> function;

	/**
	 * Gets the value of the corOrCXOROrCAND property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the corOrCXOROrCAND property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getCOROrCXOROrCAND().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link CFunctionType } {@link CORType } {@link CANDType } {@link CXORType }
	 * 
	 * 
	 */
	public List<Object> getCOROrCXOROrCAND() {
		if (corOrCXOROrCAND == null) {
			corOrCXOROrCAND = new ArrayList<Object>();
		}
		return this.corOrCXOROrCAND;
	}

	// get value TypeFunction
	public List<CFunctionType> getFunction() {
		if (function == null) {
			function = new ArrayList<CFunctionType>();
			for (Object current : this.getCOROrCXOROrCAND()) {
				if (current instanceof CFunctionType) {
					function.add((CFunctionType) current);
				}
			}
		}
		return this.function;
	}

	// get value TypeOR
	public List<CORType> getOR() {
		if (or == null) {
			or = new ArrayList<CORType>();
			for (Object current : this.getCOROrCXOROrCAND()) {
				if (current instanceof CORType) {
					or.add((CORType) current);
				}
			}
		}
		return this.or;
	}

	// get value TypeXOR
	public List<CXORType> getXOR() {
		if (xor == null) {
			xor = new ArrayList<CXORType>();
			for (Object current : this.getCOROrCXOROrCAND()) {
				if (current instanceof CXORType) {
					xor.add((CXORType) current);
				}
			}
		}
		return this.xor;
	}

	// get value TypeAND
	public List<CANDType> getAND() {
		if (and == null) {
			and = new ArrayList<CANDType>();
			for (Object current : this.getCOROrCXOROrCAND()) {
				if (current instanceof CANDType) {
					and.add((CANDType) current);
				}
			}
		}
		return this.and;
	}

}
